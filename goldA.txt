改主机名：
	
	sudo hostnamectl set-hostname controller
	sudo hostnamectl set-hostname compute
使用hostname验证
验证主机名：

	hostname
修改hosts文件：
	
	sudo vi /etc/hosts
	
hosts:
	
		
	
	# 本地回环地址
	127.0.0.1       localhost
	
	# controller 节点
	192.168.100.*   controller  # 这里使用controller的私网IP
	公网IP1         controller
	
	# compute 节点
	192.168.200.*   compute     # 这里使用compute的私网IP
	公网IP2         compute


提交controller节点的/etc/hosts内容
	
	cat /etc/hosts
	提交答题框：

	将controller节点上cat /etc/hosts命令的返回结果
	复制粘贴到指定的答题框

# 创建目录
mkdir -p /opt/centos

# 挂载 ISO 文件
mount -o loop /root/CentOS-7-x86_64-DVD-2009.iso /opt/centos

# 解压 openstack-train.tar.gz
tar -zxvf /root/openstack-train.tar.gz -C /opt

# 创建本地 YUM 源配置文件
cat <<EOF > /etc/yum.repos.d/local.repo
[local-centos]
name=Local CentOS Repository
baseurl=file:///opt/centos
enabled=1
gpgcheck=0

[local-openstack]
name=Local OpenStack Repository
baseurl=file:///opt/openstack-train
enabled=1
gpgcheck=0
EOF

# 清理和重建 YUM 缓存
yum clean all
yum makecache

# 检查 glance 包
yum list | grep glance


#搭建ftp服务器
安装 vsftpd 服务：
	
	sudo yum install vsftpd

配置 vsftpd：
	
	sudo vi /etc/vsftpd/vsftpd.conf

vsftpd.conf内容：
	
	anonymous_enable=NO
	local_enable=YES
	write_enable=YES
	chroot_local_user=YES
	local_root=/opt
	anon_root=/opt


firewall-cmd --permanent --add-service=ftp
firewall-cmd --permanent --add-port=21/tcp
firewall-cmd --reload

设置开机自启动并启动服务：
	sudo systemctl enable vsftpd
	sudo systemctl start vsftpd
重启服务生效：
	
	sudo systemctl restart vsftpd
	sudo systemctl status  vsftpd

创建 FTP 源的 repo 文件：
在 compute 节点上创建 ftp.repo 文件：

	sudo vi /etc/yum.repos.d/ftp.repo
使用controller给compute传文件
scp CentOS-Base.repo.bakbak root@192.168.71.182:/root

ftp.repo内容：
	
	[ftp]
	name=FTP Server
	baseurl=ftp://controller.example.com/pub
	enabled=1
	gpgcheck=0



提交命令：
	
	cat /etc/yum.repos.d/ftp.repo

#分区

lsblk 查看
	fdisk /dev/sdb
	n
	p
	1
	+10G
	n
	p
	2
	+10G
	w
	sudo partprobe /dev/sdb

	mkfs.xfs /dev/sdb1
	mkfs.xfs /dev/sdb2
获取lsblk命令的输出结果：
	
	lsblk -f
	

#系统调优-脏数据回写
修改系统配置文件：

	sudo vi /etc/sysctl.conf
在文件末尾添加或修改以下行：
	
	vm.dirty_ratio = 60
	vm.dirty_background_ratio = 5

应用新的sysctl设置：
	
	sudo sysctl -p
获取sysctl -p命令的返回结果：

	sysctl -p


#OpenStack搭建任务
安装软件包sh-guoji：
在controller节点执行以下命令安装软件包：
		
	yum install sh-guoji

修改脚本：

	sudo vi /root/variable.sh
在controller节点执行以下命令并记录输出：

	echo $HOST_NAME $HOST_NAME_NODE
###记录命令的输出结果，这将是您需要提交的信息


安装软件包sh-guoji：
在compute节点执行以下命令安装相同的软件包：

	sudo apt-get update
	sudo apt-get install sh-guoji

使用修改后的脚本文件：
将修改后的/root/variable.sh文件从controller节点复制到compute节点的相应位置，假设是/root/variable.sh。可以使用scp命令进行复制：

	scp /root/variable.sh compute_node_username@compute_node_ip:/root/variable.sh

生效脚本文件：
在compute节点上执行以下命令生效修改后的脚本文件：

	source /root/variable.sh


执行openstack-completion.sh文件：

	sudo chmod +x /root/openstack-completion.sh
	sudo /root/openstack-completion.sh

提交openstack--version命令的输出：

	openstack --version

####执行脚本

	sudo chmod +x /root/openstack-controller-mysql.sh
	sudo /root/openstack-controller-mysql.sh

修改CACHESIZE=128

	 vi /etc/memcached.conf
	 or
	 vi /etc/sysconfig/memcached

重启Memcached服务：

	sudo systemctl restart memcached
	or
	sudo service memcached restart

在controller节点执行以下命令并记录输出：

		ps aux | grep memcached
####执行脚本

	sudo chmod +x /root/openstack-controller-keystone.sh
	sudo /root/openstack-controller-keystone.sh
###创建用户
	
	openstack user create --domain default --password tompassword123 --email tom@example.com tom

提交：

	openstack user show tom

####controller执行脚本

	sudo chmod +x /root/openstack-controller-glance.sh
	sudo /root/openstack-controller-glance.sh
创建名为"cirros_0.3.4"的镜像：

	openstack image create --disk-format qcow2 --file cirros-0.3.4-x86_64-disk.img cirros_0.3.4

提交：

	openstack image show cirros_0.3.4

####执行脚本

	sudo chmod +x /root/openstack-controller-nova.sh
	sudo /root/openstack-controller-nova.sh

创建名为"m1"的云主机类型

	openstack flavor create --id 56 --ram 2048 --disk 20 --vcpus 2 m1

提交：

	openstack flavor show m1


####执行脚本
	sudo chmod +x /root/openstack-controller-neutron.sh
	sudo /root/openstack-controller-neutron.sh

创建外部网络ext-net和子网ext-subnet：

	# 创建外部网络ext-net
	openstack network create --external --provider-network-type flat --provider-physical-network physnet1 ext-net

	# 创建子网ext-subnet
	openstack subnet create --network ext-net --subnet-range 192.168.200.0/24 --allocation-pool start=192.168.200.100,end=192.168.200.200 --gateway 192.168.200.1 ext-subnet

提交：

	openstack subnet show ext-subnet

####搭建图形化界面
脚本：

	sudo chmod +x /root/openstack-controller-dashboard.sh
	sudo /root/openstack-controller-dashboard.sh

在compute节点操作
修改Nova配置文件nova.conf：
	
	sudo vi /etc/nova/nova.conf
conf内容：

	[nova]
	novncproxy_base_url = http://controller_ip:6080/vnc_auto.html

提交：

	cat /etc/nova/nova.conf | grep 公网IP

#数据库MongoDB

	mongodump --out /root/openstack.sql 备份
	
查看备份文件属性
	
	ls -lh /root/openstack.sql

连接DB:

	mongo
创建本地用户examuser并设置密码：

	use admin;
	db.createUser({
	  user: 'examuser',
	  pwd: '000000',
	  roles: [{ role: 'readWriteAnyDatabase', db: 'admin' }]
	});
查询用户表中的权限信息：

	use admin;
	db.getUsers();

创建安全组group_web并设置描述：

	openstack security group create --description "Custom security group" group_web

添加icmp规则和ssh规则：
	
	openstack security group rule create --protocol icmp group_web

	openstack security group rule create --protocol tcp --dst-port 22:22 group_web

查看安全组group_web的详细信息：

	openstack security group show group_web

	
创建项目shop并添加描述：
		
	openstack project create --description "Hello shop" shop

禁用项目shop：

	openstack project set --disable shop

###submit:
	
	openstack project show shop

查看当前配额值:
	
	openstack quota show admin

提升admin租户的实例配额：

	openstack quota set --instances 13 admin


确认修改后admin租户的配额值：

		openstack quota show admin

脚本：

	sudo chmod +x /root/openstack-controller-heat.sh
	sudo /root/openstack-controller-heat.sh
编写create_flavor.yaml
	
	heat_template_version: 2013-05-23

resources:
  m2_flavor:
    type: OS::Nova::Flavor
    properties:
      name: m2.flavor
      flavorid: '1234'
      ram: 1024
      disk: 20
      vcpus: 1
创建Heat堆栈：
	
	openstack stack create -t create_flavor.yaml m2_flavor_stack

####submit
	
	openstack stack list
编辑Glance配置文件glance-api.conf：

	vi /etc/glance/glance-api.conf

conf内容：
	
	[quota]
	image_size_cap = 10
	or
	[DEFAULT]
	image_size_cap = 10

###restart

	sudo systemctl restart glance-api

####submit

	cat /etc/glance/glance-api.conf | grep _quota


创建名为lvm的卷类型：
	
	openstack volume type create lvm --description "Cinder LVM backend"

创建与lvm卷类型关联的规格：

	cinder type-key lvm set volume_backend_name=lvm

创建1GB大小的云硬盘lvm_test：

	openstack volume create --size 1 --type lvm lvm_test

查询云硬盘lvm_test的详细信息：

	cinder show lvm_test

修改配置
	vi /etc/cinder/cinder.conf

conf内容：

	[DEFAULT]
	volume_copy_bps_limit = 104857600
	or
	[DEFAULT]
	volume_copy_bps_limit = 100MB/s
####submit

	cat /etc/cinder/cinder.conf | grep 104857600

脚本：

	sudo chmod +x /root/openstack-controller-swift.sh
	sudo chmod +x /root/openstack-compute-swift.sh

	sudo /root/openstack-controller-swift.sh
	sudo /root/openstack-compute-swift.sh
	
创建名为file的Swift容器：
	swift post file

上传：
	swift upload file cirros-0.3.4-x86_64-disk.img
####submit

	swift stat file

###获取token
vi openstack_script.sh

	#!/bin/bash

# Replace with your OpenStack authentication URL
export OS_AUTH_URL=http://your-openstack-auth-url
# Replace with your administrator username
export OS_USERNAME=admin
# Replace with your administrator password
export OS_PASSWORD=your-admin-password
# Replace with your administrator project name
export OS_PROJECT_NAME=admin
# Replace with your user domain name (usually Default)
export OS_USER_DOMAIN_NAME=Default

# Retrieve token
token=$(curl -s -X POST $OS_AUTH_URL/auth/tokens \
    -H "Content-Type: application/json" \
    -d '{
        "auth": {
            "identity": {
                "methods": ["password"],
                "password": {
                    "user": {
                        "domain": {"name": "'$OS_USER_DOMAIN_NAME'"},
                        "name": "'$OS_USERNAME'",
                        "password": "'$OS_PASSWORD'"
                    }
                }
            },
            "scope": {
                "project": {
                    "domain": {"name": "'$OS_USER_DOMAIN_NAME'"},
                    "name": "'$OS_PROJECT_NAME'"
                }
            }
        }
    }' | python -c "import sys, json; print(json.load(sys.stdin)['token']['id'])")

echo $token

chmod +x openstack_script.sh
./openstack_script.sh

使用token获取用户名

	curl -s -X GET $OS_AUTH_URL/users \
    -H "Content-Type: application/json" \
    -H "X-Auth-Token: $token" | python -c "import sys, json; print([user['name'] for user in json.load(sys.stdin)['users']])"


##install python3
	yum install python3
	python3 --version
	pip3 install package_name.whl
####submit 

	pip3 list

##py脚本
import requests
import json

# OpenStack authentication credentials and API endpoint
OS_AUTH_URL = 'http://your-openstack-auth-url/v3/auth/tokens'
OS_USERNAME = 'admin'
OS_PASSWORD = 'your-admin-password'
OS_PROJECT_NAME = 'admin'
OS_USER_DOMAIN_NAME = 'Default'

# Image details
IMAGE_NAME = 'cirros001'
IMAGE_FILE = 'cirros-0.3.4-x86_64-disk.img'
DISK_FORMAT = 'qcow2'
CONTAINER_FORMAT = 'bare'

def get_auth_token():
    auth_data = {
        "auth": {
            "identity": {
                "methods": ["password"],
                "password": {
                    "user": {
                        "domain": {"name": OS_USER_DOMAIN_NAME},
                        "name": OS_USERNAME,
                        "password": OS_PASSWORD
                    }
                }
            },
            "scope": {
                "project": {
                    "domain": {"name": OS_USER_DOMAIN_NAME},
                    "name": OS_PROJECT_NAME
                }
            }
        }
    }

    headers = {'Content-Type': 'application/json'}
    response = requests.post(OS_AUTH_URL, headers=headers, data=json.dumps(auth_data))
    response_data = response.json()
    return response.headers['X-Subject-Token'], response_data['token']['project']['id']

def upload_image(auth_token, project_id):
    url = f'http://your-openstack-glance-url/v2/images'
    headers = {
        'X-Auth-Token': auth_token,
        'Content-Type': 'application/json'
    }
    data = {
        'name': IMAGE_NAME,
        'disk_format': DISK_FORMAT,
        'container_format': CONTAINER_FORMAT,
        'visibility': 'private',
        'owner': project_id
    }
    files = {'file': open(IMAGE_FILE, 'rb')}
    response = requests.post(url, headers=headers, json=data, files=files)
    return response.json()['id']

if __name__ == "__main__":
    token, project_id = get_auth_token()
    image_id = upload_image(token, project_id)
    print(f"创建镜像成功，id为：{image_id}")
注意事项：
替换URL和认证信息: 将代码中的 OS_AUTH_URL 和 url 替换为你实际的OpenStack认证和Glance服务的URL。
修改文件名和格式: 确保将 IMAGE_NAME 设置为要上传的镜像名称，IMAGE_FILE 设置为要上传的镜像文件路径。
安装依赖: 确保在运行之前安装了 requests 库：

cat /root/create_image.py
python3 /root/create_image.py


###submit

	cat /root/create_image.py

依赖
pip3 install requests。
pip3 install python-openstackclient

##py脚本

	#!/usr/bin/env python3
import os
from keystoneauth1 import loading
from keystoneauth1 import session
from keystoneclient.v3 import client as keystone_client

# OpenStack Authentication Information
auth_url = 'http://<your_keystone_endpoint>/v3'  # 替换为实际的Keystone认证URL
username = 'admin'  # 替换为实际的用户名
password = 'your_password'  # 替换为实际的密码
project_name = 'admin'  # 替换为实际的项目名
user_domain_name = 'Default'  # 替换为实际的用户域名
project_domain_name = 'Default'  # 替换为实际的项目域名

# User Information
new_username = 'guojibeisheng'
new_user_password = 'your_new_user_password'
new_user_email = 'guojibeisheng@example.com'

def create_user():
    # Create authentication session
    loader = loading.get_plugin_loader('password')
    auth = loader.load_from_options(auth_url=auth_url,
                                    username=username,
                                    password=password,
                                    project_name=project_name,
                                    user_domain_name=user_domain_name,
                                    project_domain_name=project_domain_name)
    sess = session.Session(auth=auth)

    # Connect to Keystone API
    keystone = keystone_client.Client(session=sess)

    # Create user
    keystone.users.create(name=new_username,
                          password=new_user_password,
                          email=new_user_email,
                          enabled=True,
                          domain='default')

    print(f"用户 {new_username} 创建成功！")

if __name__ == '__main__':
    create_user()



####submit

	cat /root/create_user.py