	sudo yum install ansible
	ansible --version
配置Ansible主机清单和免密登录

	vi hosts
	[mysql]
	host1
	host2
	
	[mysql1]
	host1
	
	[mysql2]
	host2

将 SSH 公钥复制到目标节点

	ssh-copy-id host1
	ssh-copy-id host2

验证连接：使用 ansible 命令测试所有主机的连接状态。
	
	ansible all -m ping


编写 Ansible Playbook
	
	vi Ansible_playbook.yaml
---
- hosts: mysql
  become: true
  tasks:
    - name: Install MariaDB
      yum:
        name: mariadb-server
        state: present

    - name: Start MariaDB service
      service:
        name: mariadb
        state: started
        enabled: true


执行文件

	ansible-playbook Ansible_playbook.yaml

验证：
	
	systemctl status mariadb

编写脚本：
	mariadb.sh
	#!/bin/bash
	# Wait for MySQL service to start
	sleep 10

	# Initialize MariaDB
	mysql -u root -p123456 <<EOF
	CREATE DATABASE IF NOT EXISTS mydatabase;
	GRANT ALL PRIVILEGES ON mydatabase.* TO 'root'@'localhost' IDENTIFIED BY '123456';
	FLUSH PRIVILEGES;
	EOF

	echo "MariaDB initialization completed."

	chmod +x mariadb.sh

创建一个 Ansible Playbook 文件，例如 init.yml，用于执行 mariadb.sh 脚本：
#!/bin/bash

# Wait for MySQL service to start
sleep 10

# Initialize MariaDB
mysql -u root -p123456 <<EOF
CREATE DATABASE IF NOT EXISTS mydatabase;
GRANT ALL PRIVILEGES ON mydatabase.* TO 'root'@'localhost' IDENTIFIED BY '123456';
FLUSH PRIVILEGES;
EOF

echo "MariaDB initialization completed."


执行 Ansible Playbook：

	
	ansible-playbook  init.yml
在 node1 节点上执行以下命令，检查 MariaDB 是否正确初始化：
	mysql -u root -p123456
####编辑 Ansible 主机清单文件 hosts，为 host1 和 host2 节点添加变量。

	[mysql]
	host1 id=20
	host2 id=30
	
	[mysql1]
	host1 id=20
	
	[mysql2]
	host2 id=30

验证主机变量：

	cat /etc/ansible/hosts | grep id



创建 my.cnf.j2 模板文件

# Ansible managed: Do not edit this file manually

[mysqld]
server-id = {{ server_id }}
log_bin = /var/log/mysql/mysql-bin.log
binlog_format = mixed
expire_logs_days = 7
max_binlog_size = 100M
innodb_flush_log_at_trx_commit = 1
sync_binlog = 1
bind-address = 0.0.0.0

{% if replication_role == 'master' %}
# Master specific settings
{% elif replication_role == 'slave' %}
# Slave specific settings
relay_log = /var/lib/mysql/relay-bin
relay_log_index = /var/lib/mysql/relay-bin.index
log_slave_updates = 1
read_only = 1
{% endif %}


创建 mariadb.yaml Ansible Playbook文件
---
- hosts: host2
  become: true
  vars:
    server_id: 2  # 替换为host2的服务器ID
    replication_role: 'slave'  # 替换为host2的复制角色
  tasks:
    - name: Copy my.cnf.j2 template to remote host
      template:
        src: my.cnf.j2
        dest: /etc/mysql/my.cnf
        owner: root
        group: root
        mode: 0644

    - name: Restart MySQL service
      service:
        name: mysql
        state: restarted
        enabled: true
        daemon_reload: yes

- hosts: host1
  become: true
  vars:
    server_id: 1  # 替换为host1的服务器ID
    replication_role: 'master'  # 替换为host1的复制角色
  tasks:
    - name: Copy my.cnf.j2 template to remote host
      template:
        src: my.cnf.j2
        dest: /etc/mysql/my.cnf
        owner: root
        group: root
        mode: 0644

    - name: Restart MySQL service
      service:
        name: mysql
        state: restarted
        enabled: true
        daemon_reload: yes


ansible-playbook mariadb.yaml

mysql -u root -p -e "SHOW SLAVE STATUS \G;"
